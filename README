# Connect4Game â€“ GUI Version

A Python-based Connect Four game featuring a graphical user interface (GUI) and multiple intelligent AI agents. Built with Pygame, this project allows players to enjoy classic Connect 4 gameplay in several interactive modes, including a pure Human vs Human experience, as well as battles against various AI agents.

## Features

- **GUI-Based Gameplay** using Pygame.
- **Game Modes**:
  - Human vs Human: Play against a friend locally.
  - Human vs Random Agent
  - Human vs Smart Agent
  - Human vs MiniMax Agent
  - Human vs ML Agent (ML-based predictions with fallback to Minimax if model is unavailable)
  - AI vs AI: Any combination of AI agents (Random, Smart, Minimax, ML)
- **Turn Timer**: Enforced move delay to prevent multi-click issues.
- **AI Agents Included**:
  - ðŸ”¹ RandomAgent: Makes random legal moves.
  - ðŸ”¹ SmartAgent: Tries to block or win strategically.
  - ðŸ”¹ MiniMaxAgent: Uses Minimax with alpha-beta pruning.
  - ðŸ”¹ MLAgent: Uses machine learning on the Connect-4 dataset.
- **Background Music** via `music_player.py`.
- **Register Player Prompt**: Optionally enter your name at the start.
- **Modular Codebase** for easy extensions and improvements.

## Installation & Setup

### Prerequisites

- Python 3.x  
- Pip package manager

### Install Dependencies

```bash
pip install -r requirements.txt

Running the Game

cd src/connect4
python main.py


### Project Structure

Connect4Game/
â”œâ”€â”€ assets/                  # Audio, images, etc.
â”œâ”€â”€ connect4_dataset/        # ML dataset and model files
â”œâ”€â”€ reports/                 # Reports and documentation
â”œâ”€â”€ src/
â”‚   â””â”€â”€ connect4/
â”‚       â”œâ”€â”€ agents/
â”‚       â”‚   â”œâ”€â”€ random_agent.py
â”‚       â”‚   â”œâ”€â”€ smart_agent.py
â”‚       â”‚   â”œâ”€â”€ minimax_agent.py
â”‚       â”‚   â”œâ”€â”€ ml_agent.py
â”‚       â”œâ”€â”€ utils/
â”‚       â”‚   â”œâ”€â”€ board_utils.py
â”‚       â”‚   â”œâ”€â”€ game_state.py
â”‚       â”‚   â”œâ”€â”€ game_help.py
â”‚       â”‚   â”œâ”€â”€ music_player.py
â”‚       â”‚   â”œâ”€â”€ player_data.py
â”‚       â”œâ”€â”€ graphics.py
â”‚       â”œâ”€â”€ constants.py
â”‚       â”œâ”€â”€ main.py
â”‚       â”œâ”€â”€ README.md
â”œâ”€â”€ .gitignore
â”œâ”€â”€ requirements.txt
â”œâ”€â”€ scores.csv


### Customization

from agents import RandomAgent, SmartAgent, MinimaxAgent, MLAgent

agent1 = SmartAgent()
agent2 = MLAgent()

# Future Improvements

Upgrade MLAgent with a trained neural network.

Add animations and transitions for piece drops.

Add networking support for remote Human vs Human.

Integrate advanced algorithms like Monte Carlo Tree Search (MCTS).

# Acknowledgements

Minimax logic adapted from GeeksforGeeks â€“ Minimax Algorithm (Alpha-Beta Pruning)

Dataset sourced from UCI Machine Learning Repository â€“ Connect-4 Game Data

# GitHub Repository

https://github.com/OlaShu112/Connect4Game

.gitignore

__pycache__/
*.pyc
.venv/
assets/*.wav
models/*.pkl

requirements.txt

pygame
pandas
numpy
scikit-learn
joblib
